// Generated by GitHub Copilot

type DebouncedFunction<F extends (...args: any[]) => any> = (
	...args: Parameters<F>
) => Promise<ReturnType<F>>

export function debounce<F extends (...args: any[]) => any>(
	func: F,
	delay: number
): DebouncedFunction<F> {
	let timeoutId: ReturnType<typeof setTimeout> | undefined

	return function (...args: Parameters<F>): Promise<ReturnType<F>> {
		clearTimeout(timeoutId)
		return new Promise<ReturnType<F>>((resolve) => {
			timeoutId = setTimeout(() => {
				const result = func(...args)
				resolve(result)
			}, delay) as unknown as ReturnType<typeof setTimeout>
		})
	}
}
